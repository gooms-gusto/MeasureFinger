//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.18052
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntLibContrib.Data.SqLite.Configuration {
    using System;
    
    
    /// <summary>
    ///   Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
    /// </summary>
    // StronglyTypedResourceBuilder generó automáticamente esta clase
    // a través de una herramienta como ResGen o Visual Studio.
    // Para agregar o quitar un miembro, edite el archivo .ResX y, a continuación, vuelva a ejecutar ResGen
    // con la opción /str o recompile su proyecto de VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DesignResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DesignResources() {
        }
        
        /// <summary>
        ///   Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("EntLibContrib.Data.SqLite.Configuration.DesignResources", typeof(DesignResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
        ///   búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a The name of the stored procedure in the database that creates a new Category in the tables. 
        ///The default is &apos;AddCategory&apos; and is created by the scripts you can run to create the logging database..
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataAddCategoryStoredProcNameDescription {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataAddCategoryStoredProcNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Add Category Procedure.
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataAddCategoryStoredProcNameDisplayName {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataAddCategoryStoredProcNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a The name of the Database Instance to use for logging messages, as configured in the Data Access Application Block..
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataDatabaseInstanceNameDescription {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataDatabaseInstanceNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Database Instance.
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataDatabaseInstanceNameDisplayName {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataDatabaseInstanceNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a A logging target listener that sends log messages to a specified database using a database instance configured in the Data Access Application Block..
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Database Trace Listener.
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a The minimum severity of messages that will be sent to the logging target. 
        ///Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
        ///The behavior is for messages with the selected severity and all higher severities to be included. 
        ///For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataFilterDescription {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Severity Filter.
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataFilterDisplayName {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataFilterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a The name of the Log Message Formatter to use to format log messages written to the database..
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataFormatterDescription {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataFormatterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Formatter.
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataFormatterDisplayName {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataFormatterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a The fully qualified type name of the Listener..
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Listener Data Type.
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a The name of the Database Trace Listener..
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataNameDescription {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Name.
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataNameDisplayName {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
        ///Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. The default is None. This property is optional..
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataTraceOutputOptionsDescription {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataTraceOutputOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Trace Output Options.
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataTraceOutputOptionsDisplayName {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataTraceOutputOptionsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a The fully qualified type name of the Database Trace Listener..
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Type.
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a The name of the stored procedure in the database that writes log messages into the tables. 
        ///The default is &apos;WriteLog&apos;, and is created by the scripts you can run to create the logging database..
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataWriteLogStoredProcNameDescription {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataWriteLogStoredProcNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a Write To Log Procedure.
        /// </summary>
        internal static string FormattedDatabaseTraceListenerDataWriteLogStoredProcNameDisplayName {
            get {
                return ResourceManager.GetString("FormattedDatabaseTraceListenerDataWriteLogStoredProcNameDisplayName", resourceCulture);
            }
        }
    }
}
