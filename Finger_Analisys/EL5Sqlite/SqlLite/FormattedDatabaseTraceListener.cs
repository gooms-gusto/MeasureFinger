using System;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Globalization;
using System.Text;
using EntLibContrib.Data.SQLite.Configuration;
using Microsoft.Practices.EnterpriseLibrary.Common.Configuration;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using Microsoft.Practices.EnterpriseLibrary.Logging.Formatters;
using Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners;

namespace EntLibContrib.Data.SQLite
{
    /// <summary>
    /// A <see cref="System.Diagnostics.TraceListener"/> that writes to a database, formatting the output with an <see cref="ILogFormatter"/>.
    /// <br/ >All subsystem is fully autogenerated, designed specially for Sqlite 3.x
    /// </summary>
    /// <author>Manuel Soler (ModMa) 2013</author>
    /// <remarks>Based in the original FormattedDatabaseTraceListener of EL5.
    /// <br />This version is not official!</remarks>
    /// <see cref="https://entlib.codeplex.com/discussions/16196"/>
    [ConfigurationElementType(typeof(FormattedDatabaseTraceListenerData))]
    public class FormattedDatabaseTraceListener : FormattedTraceListenerBase
    {
        private readonly Database database;
        private readonly static string writeLogQuery = GetQueryLogString();
        private readonly static string writeCategoryQuery = GetQueryCategoryString();
        private readonly static string writeCategoryLogQuery = GetQueryCategoryLogString();

        /// <summary>
        /// Initializes a new instance of <see cref="FormattedDatabaseTraceListener"/>.
        /// </summary>
        /// <param name="database">The database for writing the log.</param>
        /// <param name="writeLogStoredProcName">The stored procedure name for writing the log.</param>
        /// <param name="addCategoryStoredProcName">The stored procedure name for adding a category for this log.</param>
        /// <param name="formatter">The formatter.</param>        
        public FormattedDatabaseTraceListener(Database database, ILogFormatter formatter) : base(formatter)
        {
            this.database = database;
        }

        /// <summary>
        /// The Write method 
        /// </summary>
        /// <param name="message">The message to log</param>
        public override void Write(string message)
        {
            ExecuteWriteLogStoredProcedure(0, 5, TraceEventType.Information, string.Empty, DateTime.Now, string.Empty,
                                            string.Empty, string.Empty, string.Empty, null, null, message, database);
        }

        /// <summary>
        /// The WriteLine method.
        /// </summary>
        /// <param name="message">The message to log</param>
        public override void WriteLine(string message)
        {
            Write(message);
        }

        /// <summary>
        /// Delivers the trace data to the underlying database.
        /// </summary>
        /// <param name="eventCache">The context information provided by <see cref="System.Diagnostics"/>.</param>
        /// <param name="source">The name of the trace source that delivered the trace data.</param>
        /// <param name="eventType">The type of event.</param>
        /// <param name="id">The id of the event.</param>
        /// <param name="data">The data to trace.</param>
        public override void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data)
        {
            if ((this.Filter == null) || this.Filter.ShouldTrace(eventCache, source, eventType, id, null, null, data, null))
            {
                if (data is LogEntry)
                {
                    LogEntry logEntry = data as LogEntry;
                    ExecuteStoredProcedure(logEntry);
                }
                else if (data is string)
                {
                    Write(data as string);
                }
                else
                {
                    base.TraceData(eventCache, source, eventType, id, data);
                }
            }
        }

        /// <summary>
        /// Gets the database.
        /// </summary>
        /// <value>
        /// The database.
        /// </value>
        public Database Database
        {
            get { return this.database; }
        }

        /// <summary>
        /// Declares the supported attributes for <see cref="FormattedDatabaseTraceListener"/>.
        /// </summary>
        protected override string[] GetSupportedAttributes()
        {
            return new string[2] { "formatter", "databaseInstanceName" };
        }

        #region Sqlite translated Queries

        protected static string GetQueryLogString()
        {
            var createWriteLog = new StringBuilder();
            createWriteLog.AppendLine("INSERT INTO [Log] (");
            createWriteLog.AppendLine("EventID,");
            createWriteLog.AppendLine("Priority,");
            createWriteLog.AppendLine("Severity,");
            createWriteLog.AppendLine("Title,");
            createWriteLog.AppendLine("[Timestamp],");
            createWriteLog.AppendLine("MachineName,");
            createWriteLog.AppendLine("AppDomainName,");
            createWriteLog.AppendLine("ProcessID,");
            createWriteLog.AppendLine("ProcessName,");
            createWriteLog.AppendLine("ThreadName,");
            createWriteLog.AppendLine("Win32ThreadId,");
            createWriteLog.AppendLine("Message,");
            createWriteLog.AppendLine("FormattedMessage");
            createWriteLog.AppendLine(")");
            createWriteLog.AppendLine("VALUES (");
            createWriteLog.AppendLine("@EventID, ");
            createWriteLog.AppendLine("@Priority, ");
            createWriteLog.AppendLine("@Severity,");
            createWriteLog.AppendLine("@Title, ");
            createWriteLog.AppendLine("@Timestamp,");
            createWriteLog.AppendLine("@MachineName, ");
            createWriteLog.AppendLine("@AppDomainName,");
            createWriteLog.AppendLine("@ProcessID,");
            createWriteLog.AppendLine("@ProcessName,");
            createWriteLog.AppendLine("@ThreadName,");
            createWriteLog.AppendLine("@Win32ThreadId,");
            createWriteLog.AppendLine("@Message,");
            createWriteLog.AppendLine("@FormattedMessage);");
            createWriteLog.AppendLine("SELECT last_insert_rowid() from [Log]");
            return createWriteLog.ToString();
        }

        protected static string GetQueryCategoryString()
        {
            var createWriteCategory = new StringBuilder();
            createWriteCategory.AppendLine("INSERT INTO Category (CategoryName)");
            createWriteCategory.AppendLine("SELECT @CategoryName");
            createWriteCategory.AppendLine("WHERE NOT EXISTS (SELECT 1 FROM Category WHERE CategoryName = @CategoryName);");
            createWriteCategory.AppendLine("SELECT [CategoryID] from [Category] WHERE CategoryName = @CategoryName");
            return createWriteCategory.ToString();
        }

        protected static string GetQueryCategoryLogString()
        {
            var createWriteCategoryLog = new StringBuilder();
            createWriteCategoryLog.AppendLine("INSERT INTO CategoryLog (CategoryID, LogID)");
            createWriteCategoryLog.AppendLine("SELECT @CategoryID, @LogID");
            createWriteCategoryLog.AppendLine("WHERE NOT EXISTS (SELECT 1 FROM CategoryLog WHERE CategoryID=@CategoryID and LogID=@LogID);");
            createWriteCategoryLog.AppendLine("SELECT [CategoryLogID] from [CategoryLog] WHERE CategoryID=@CategoryID and LogID=@LogID");
            return createWriteCategoryLog.ToString();
        }

        private bool tablesInited = false;
        private string lastConnectionString;
        protected virtual void CreateSqliteEFDefaultTables(Database db, DbTransaction transaction)
        {
            //checkit for reuses or changes, resets the init flag!
            if (!string.Equals(transaction.Connection.ConnectionString, lastConnectionString))
            {
                lastConnectionString = transaction.Connection.ConnectionString;
                tablesInited = false;
            }

            if (!tablesInited)
            {
                var createLog = new StringBuilder();
                createLog.AppendLine("CREATE TABLE IF NOT EXISTS [Log](");
                createLog.AppendLine("[LogID] [INTEGER] IDENTITY(1,1) NOT NULL PRIMARY KEY AUTOINCREMENT,");
                createLog.AppendLine("[EventID] [int] NULL,");
                createLog.AppendLine("[Priority] [int] NOT NULL,");
                createLog.AppendLine("[Severity] [nvarchar](32) NOT NULL,");
                createLog.AppendLine("[Title] [nvarchar](256) NOT NULL,");
                createLog.AppendLine("[Timestamp] [datetime] NOT NULL,");
                createLog.AppendLine("[MachineName] [nvarchar](32) NOT NULL,");
                createLog.AppendLine("[AppDomainName] [nvarchar](512) NOT NULL,");
                createLog.AppendLine("[ProcessID] [nvarchar](256) NOT NULL,");
                createLog.AppendLine("[ProcessName] [nvarchar](512) NOT NULL,");
                createLog.AppendLine("[ThreadName] [nvarchar](512) NULL,");
                createLog.AppendLine("[Win32ThreadId] [nvarchar](128) NULL,");
                createLog.AppendLine("[Message] [nvarchar](1500) NULL,");
                createLog.AppendLine("[FormattedMessage] [ntext] NULL");
                createLog.AppendLine(");");

                DbCommand cmd = cmd = CreateSqliteCommand(transaction.Connection, createLog.ToString());
                if (transaction.Connection.State != ConnectionState.Open) transaction.Connection.Open();
                db.ExecuteNonQuery(cmd, transaction);


                var createCategory = new StringBuilder();
                createCategory.AppendLine("CREATE TABLE IF NOT EXISTS [Category](");
                createCategory.AppendLine("[CategoryID] [INTEGER] IDENTITY(1,1) NOT NULL PRIMARY KEY AUTOINCREMENT,");
                createCategory.AppendLine("[CategoryName] [nvarchar](64) NOT NULL");
                createCategory.AppendLine(");");

                cmd = CreateSqliteCommand(transaction.Connection, createCategory.ToString());
                if (transaction.Connection.State != ConnectionState.Open) transaction.Connection.Open();
                db.ExecuteNonQuery(cmd, transaction);


                var createCategoryLog = new StringBuilder();
                createCategoryLog.AppendLine("CREATE TABLE IF NOT EXISTS [CategoryLog](");
                createCategoryLog.AppendLine("[CategoryLogID] [INTEGER] IDENTITY(1,1) NOT NULL PRIMARY KEY AUTOINCREMENT,");
                createCategoryLog.AppendLine("[CategoryID] [int] NOT NULL,");
                createCategoryLog.AppendLine("[LogID] [int] NOT NULL,");
                createCategoryLog.AppendLine("FOREIGN KEY(CategoryID) REFERENCES Category(CategoryID),");
                createCategoryLog.AppendLine("FOREIGN KEY(LogID) REFERENCES Log(LogID)");
                createCategoryLog.AppendLine(");");

                cmd = CreateSqliteCommand(transaction.Connection, createCategoryLog.ToString());
                if (transaction.Connection.State != ConnectionState.Open) transaction.Connection.Open();
                db.ExecuteNonQuery(cmd, transaction);

                tablesInited = true;
            }
        }

        protected virtual DbCommand CreateSqliteCommand(DbConnection connection, string commandText)
        {
            DbCommand cmd = connection.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = commandText;
            return cmd;
        }

        #endregion

        #region Emulated Calls to Procedures

        /// <summary>
        /// Executes the stored procedures
        /// </summary>
        /// <param name="logEntry">The LogEntry to store in the database</param>
        private void ExecuteStoredProcedure(LogEntry logEntry)
        {
            using (DbConnection connection = database.CreateConnection())
            {
                connection.Open();

                using (DbTransaction transaction = connection.BeginTransaction())
                {
                    try
                    {
                        int logID = ExecuteWriteLogStoredProcedure(logEntry, database, transaction);
                        ExecuteAddCategoryStoredProcedure(logEntry, logID, database, transaction);
                        transaction.Commit();
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }

                }
            }
        }

        /// <summary>
        /// Executes the WriteLog stored procedure
        /// </summary>
        /// <param name="eventId">The event id for this LogEntry.</param>
        /// <param name="priority">The priority for this LogEntry.</param>
        /// <param name="severity">The severity for this LogEntry.</param>
        /// <param name="title">The title for this LogEntry.</param>
        /// <param name="timeStamp">The timestamp for this LogEntry.</param>
        /// <param name="machineName">The machine name for this LogEntry.</param>
        /// <param name="appDomainName">The appDomainName for this LogEntry.</param>
        /// <param name="processId">The process id for this LogEntry.</param>
        /// <param name="processName">The processName for this LogEntry.</param>
        /// <param name="managedThreadName">The managedthreadName for this LogEntry.</param>
        /// <param name="win32ThreadId">The win32threadID for this LogEntry.</param>
        /// <param name="message">The message for this LogEntry.</param>
        /// <param name="db">An instance of the database class to use for storing the LogEntry</param>
        /// <returns>An integer for the LogEntry Id</returns>
        private int ExecuteWriteLogStoredProcedure(int eventId, int priority, TraceEventType severity, string title, DateTime timeStamp,
                                                    string machineName, string appDomainName, string processId, string processName,
                                                    string managedThreadName, string win32ThreadId, string message, Database db)
        {
            using (DbConnection connection = database.CreateConnection())
            {
                connection.Open();

                using (DbTransaction transaction = connection.BeginTransaction())
                {
                    try
                    {
                        CreateSqliteEFDefaultTables(db, transaction);
                        DbCommand cmd = CreateSqliteCommand(transaction.Connection, writeLogQuery);

                        db.AddInParameter(cmd, "eventID", DbType.Int32, eventId);
                        db.AddInParameter(cmd, "priority", DbType.Int32, priority);
                        db.AddParameter(cmd, "severity", DbType.String, 32, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, severity.ToString());
                        db.AddParameter(cmd, "title", DbType.String, 256, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, title);
                        db.AddInParameter(cmd, "timestamp", DbType.DateTime, timeStamp);
                        db.AddParameter(cmd, "machineName", DbType.String, 32, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, machineName);
                        db.AddParameter(cmd, "AppDomainName", DbType.String, 512, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, appDomainName);
                        db.AddParameter(cmd, "ProcessID", DbType.String, 256, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, processId);
                        db.AddParameter(cmd, "ProcessName", DbType.String, 512, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, processName);
                        db.AddParameter(cmd, "ThreadName", DbType.String, 512, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, managedThreadName);
                        db.AddParameter(cmd, "Win32ThreadId", DbType.String, 128, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, win32ThreadId);
                        db.AddParameter(cmd, "message", DbType.String, 1500, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, message);
                        db.AddInParameter(cmd, "formattedmessage", DbType.String, message);

                        int logId = Convert.ToInt32(db.ExecuteScalar(cmd, transaction));
                        transaction.Commit();
                        return logId;
                    }
                    catch
                    {
                        transaction.Rollback();
                        throw;
                    }

                }
            }

        }

        /// <summary>
        /// Executes the WriteLog stored procedure
        /// </summary>
        /// <param name="logEntry">The LogEntry to store in the database.</param>
        /// <param name="db">An instance of the database class to use for storing the LogEntry</param>
        /// <param name="transaction">The transaction that wraps around the execution calls for storing the LogEntry</param>
        /// <returns>An integer for the LogEntry Id</returns>
        private int ExecuteWriteLogStoredProcedure(LogEntry logEntry, Database db, DbTransaction transaction)
        {
            CreateSqliteEFDefaultTables(db, transaction);
            DbCommand cmd = CreateSqliteCommand(transaction.Connection, writeLogQuery);

            db.AddInParameter(cmd, "eventID", DbType.Int32, logEntry.EventId);
            db.AddInParameter(cmd, "priority", DbType.Int32, logEntry.Priority);
            db.AddParameter(cmd, "severity", DbType.String, 32, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, logEntry.Severity.ToString());
            db.AddParameter(cmd, "title", DbType.String, 256, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, logEntry.Title);
            db.AddInParameter(cmd, "timestamp", DbType.DateTime, logEntry.TimeStamp);
            db.AddParameter(cmd, "machineName", DbType.String, 32, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, logEntry.MachineName);
            db.AddParameter(cmd, "AppDomainName", DbType.String, 512, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, logEntry.AppDomainName);
            db.AddParameter(cmd, "ProcessID", DbType.String, 256, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, logEntry.ProcessId);
            db.AddParameter(cmd, "ProcessName", DbType.String, 512, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, logEntry.ProcessName);
            db.AddParameter(cmd, "ThreadName", DbType.String, 512, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, logEntry.ManagedThreadName);
            db.AddParameter(cmd, "Win32ThreadId", DbType.String, 128, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, logEntry.Win32ThreadId);
            db.AddParameter(cmd, "message", DbType.String, 1500, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Default, logEntry.Message);

            if (Formatter != null)
                db.AddInParameter(cmd, "formattedmessage", DbType.String, Formatter.Format(logEntry));
            else
                db.AddInParameter(cmd, "formattedmessage", DbType.String, logEntry.Message);
           
            int logId = Convert.ToInt32(db.ExecuteScalar(cmd, transaction));
            return logId;
        }

        /// <summary>
        /// Executes the AddCategory stored procedure
        /// </summary>
        /// <param name="logEntry">The LogEntry to store in the database.</param>
        /// <param name="logID">The unique identifer for the LogEntry as obtained from the WriteLog Stored procedure.</param>
        /// <param name="db">An instance of the database class to use for storing the LogEntry</param>
        /// <param name="transaction">The transaction that wraps around the execution calls for storing the LogEntry</param>
        private void ExecuteAddCategoryStoredProcedure(LogEntry logEntry, int logID, Database db, DbTransaction transaction)
        {
            CreateSqliteEFDefaultTables(db, transaction);

            foreach (string category in logEntry.Categories)
            {
                DbCommand cmd = CreateSqliteCommand(transaction.Connection, writeCategoryQuery);
                db.AddInParameter(cmd, "categoryName", DbType.String, category);                
                int categoryId = Convert.ToInt32(db.ExecuteScalar(cmd, transaction));

                cmd = CreateSqliteCommand(transaction.Connection, writeCategoryLogQuery);
                db.AddInParameter(cmd, "categoryID", DbType.Int32, categoryId);
                db.AddInParameter(cmd, "logID", DbType.Int32, logID);
                int categoryLogId = Convert.ToInt32(db.ExecuteScalar(cmd, transaction));
            }
        }

        #endregion
    }
}
